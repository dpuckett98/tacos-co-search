import random
import pickle
import matplotlib.pyplot as plt

import dataflow_wrapper as dw
import evolutionary_search_v3 as es
import build_models_v2 as bm
import build_hardware_v2 as bh

def nasvit_exp_23_search_space():
	accuracies_string = ['77.432,', '78.079,', '78.31725,', '78.18975,', '78.44975,', '78.15275,', '77.5655,', '78.44525,', '78.55975,', '77.82125,', '78.35175,', '78.83825,', '78.296,', '77.66525,', '77.51725,', '77.74375,', '77.95375,', '78.81875,', '77.9835,', '78.56875,', '77.4695,', '78.0095,', '78.09075,', '78.77225,', '78.29125,', '77.85775,', '77.86825,', '78.11625,', '78.358,', '77.54725,', '78.09975,', '77.9095,', '78.62425,', '77.902,', '78.05475,', '78.35875,', '78.60575,', '78.4465,', '77.8935,', '78.181,', '78.447,', '78.39425,', '78.18125,', '78.57775,', '78.14275,', '78.72075,', '78.23525,', '78.20175,', '77.79825,', '78.70575,', '77.98375,', '78.5225,', '78.4545,', '78.25375,', '78.6595,', '78.833,', '77.48275,', '79.12025,', '78.0845,', '78.65825,', '77.20325,', '77.9865,', '78.03325,', '78.108,', '77.709,', '78.115,', '77.58575,', '78.17575,', '78.195,', '77.8785,', '78.082,', '77.802,', '77.99825,', '78.7825,', '77.266,', '78.6795,', '78.0,', '78.41375,', '77.65225,', '77.35275,', '78.6615,', '77.9185,', '78.3995,', '78.606,', '78.00475,', '77.95375,', '78.55375,', '78.292,', '78.25675,', '78.84425,', '78.486,', '78.408,', '77.4655,', '77.54425,', '78.07625,', '78.75025,', '78.2035,', '78.0045,', '78.44125,', '78.569,']
	flops_string = ['350.34510400000005,', '366.408414,', '915.29314,', '427.644376,', '878.918584,', '674.576342,', '747.461064,', '1403.371338,', '805.6302079999999,', '1090.30538,', '816.131072,', '995.846036,', '430.881446,', '505.512606,', '712.2967039999999,', '684.19904,', '1185.882198,', '944.1400159999998,', '712.8677739999999,', '617.664334,', '273.51682000000005,', '660.107712,', '394.44662400000004,', '844.157696,', '482.052352,', '420.96179400000005,', '290.31230800000003,', '1129.233104,', '434.476312,', '488.93004,', '650.5552939999999,', '938.5828759999999,', '560.83991,', '411.71903799999995,', '463.36231200000003,', '742.3705600000001,', '962.859264,', '1182.784746,', '460.303812,', '1425.669982,', '702.043002,', '1016.2266299999999,', '1069.6132200000002,', '726.733176,', '1247.773076,', '651.4219939999999,', '575.04155,', '692.248288,', '630.222324,', '940.22917,', '1167.0739600000002,', '502.195854,', '551.429166,', '1158.3417679999998,', '715.9418880000001,', '850.781184,', '477.00717,', '890.1409279999999,', '564.5323999999999,', '355.710344,', '441.62281600000006,', '485.683888,', '1313.136788,', '1518.561876,', '486.74188599999997,', '415.896472,', '384.50368199999997,', '992.436736,', '587.019008,', '353.04662400000007,', '485.360518,', '536.7409360000001,', '749.413448,', '898.151936,', '308.99141199999997,', '872.1131519999999,', '335.20345599999996,', '904.26661,', '820.3775999999999,', '749.1714559999999,', '1016.32319,', '466.103724,', '1157.659782,', '675.6202480000001,', '953.866944,', '672.554976,', '876.0883200000001,', '369.596062,', '698.698752,', '602.4471580000001,', '510.23838599999993,', '1009.9503559999999,', '355.71547599999997,', '633.576096,', '436.366696,', '956.9512960000001,', '732.905728,', '693.629928,', '765.509376,', '409.093048,']
	accuracies = [float(i[:-1]) for i in accuracies_string]
	flops = [float(i[:-1]) for i in flops_string]
	
	plt.plot(flops, accuracies, '.')
	plt.xlabel("FLOPs")
	plt.ylabel("Accuracy (%)")
	plt.title("Random Search of NASViT Search Space (w/ Enc/Dec inserted)")
	plt.show()

def nasvit_vanilla_search_space():
	# original data
	#accuracies_string = ['528.535294,', '453.46012800000005,', '1214.441812,', '1278.627354,', '959.5531039999998,', '1020.418688,', '581.8922200001,', '473.72632,', '610.974472,', '823.8661119999999,', '783.578368,', '396.758896,', '1521.334226,', '509.8888,', '959.848,', '916.9873719999999,', '379.03126799999995,', '346.8406720000001,', '493.991246,', '669.1461119999999,', '544.453654,'1066.262952,', '620.019456,', '390.60882000000004,', '457.2971360000001,', '425.18756,', '446.9440320000001,', '1209.0558', '660.690688,', '1471.1367440000001,', '781.1932159999999,', '1265.986256,', '470.57698999999997,', '369.316384,', '450.528,', '915.337992,', '974.446904,', '525.631024,', '1121.437574,', '722.6318080000001,', '1271.123584,', '706.62514400000', '742.477824,', '1133.407804,', '494.0619060000001,', '382.374592,', '1178.6751140000001,', '1078.345624,', '434.61217600003,', '870.9711360000001,', '1102.823504,', '479.343176,', '872.670988,', '509.31680200000005,', '730.02506,', '962.2649000001,', '727.6828159999999,', '1222.682772,', '373.137538,', '1270.5894739999999,', '591.28664,', '727.108608,', '1083.254,', '750.097672,', '567.8915860000001,', '1164.465496,', '1384.671856,', '610.2947839999999,', '1294.824686,', '630.8064', '532.44388,', '800.1108479999999,', '408.700888,', '426.17556800000006,', '738.264576,', '1393.125436,', '1258.205432,'1117.129684,', '576.193408,', '1246.654058,', '349.13465800000006,', '423.25315200000006,', '485.124656,', '893.0959359999,', '448.410832,', '777.969536,', '1143.1616700000002,', '415.29476800000003,', '338.489976,', '320.203456,', '868.5910759999,', '730.150464,', '330.065584,', '650.560436,', '1301.560922,', '374.781278,', '429.13309599999997,', '576.719102,', '.540496,', '609.43012,']
	#flops_string = ['80.35,', '79.638,', '81.586,', '81.946,', '81.606,', '81.888,', '80.502,', '79.824,', '80.446,', '81.106,', '81.082,', '456,', '81.826,', '79.68,', '81.338,', '81.198,', '79.038,', '78.838,', '80.358,', '80.878,', '80.256,', '81.638,', '80.45, '79.058,', '79.426,', '79.36,', '79.296,', '81.874,', '81.056,', '81.898,', '81.178,', '81.796,', '80.18,', '79.14,', '73,', '81.364,', '81.426,', '80.032,', '82.056,', '81.206,', '81.87,', '80.868,', '81.458,', '81.804,', '79.458,', '79.044,'81.64,', '81.664,', '79.518,', '81.296,', '81.298,', '79.532,', '80.948,', '79.704,', '80.994,', '81.174,', '80.442,', '834,', '79.13,', '81.792,', '80.344,', '80.778,', '81.714,', '80.654,', '80.668,', '81.826,', '81.96,', '80.318,', '81.862,'80.52,', '79.594,', '81.466,', '79.416,', '79.49,', '80.9,', '82.044,', '81.576,', '81.47,', '80.702,', '81.888,', '79.13, '79.356,', '79.5,', '81.322,', '79.614,', '81.04,', '81.606,', '79.364,', '78.832,', '78.86,', '80.732,', '80.782,', '784,', '80.782,', '82.272,', '79.014,', '79.538,', '80.356,', '79.49,', '80.546,']
	# modified for 
	flops_string = ['528.535294,', '453.46012800000005,', '1214.441812,', '1278.627354,', '959.5531039999998,', '1020.418688,', '581.8922200001,', '473.72632,', '610.974472,', '823.8661119999999,', '783.578368,', '1521.334226,', '509.8888,', '959.848,', '916.9873719999999,', '379.03126799999995,', '346.8406720000001,', '493.991246,', '669.1461119999999,', '544.453654,', '1066.262952,', '620.019456,', '390.60882000000004,', '457.2971360000001,', '425.18756,', '446.9440320000001,', '1209.0558', '660.690688,', '1471.1367440000001,', '781.1932159999999,', '1265.986256,', '470.57698999999997,', '369.316384,', '450.528,', '915.337992,', '974.446904,', '525.631024,', '1121.437574,', '722.6318080000001,', '1271.123584,', '706.62514400000', '742.477824,', '1133.407804,', '494.0619060000001,', '382.374592,', '1178.6751140000001,', '1078.345624,', '434.61217600003,', '870.9711360000001,', '1102.823504,', '479.343176,', '872.670988,', '509.31680200000005,', '730.02506,', '962.2649000001,', '727.6828159999999,', '1222.682772,', '373.137538,', '1270.5894739999999,', '591.28664,', '727.108608,', '1083.254,', '750.097672,', '567.8915860000001,', '1164.465496,', '1384.671856,', '610.2947839999999,', '1294.824686,', '630.8064', '532.44388,', '800.1108479999999,', '408.700888,', '426.17556800000006,', '738.264576,', '1393.125436,', '1258.205432,', '1117.129684,', '576.193408,', '1246.654058,', '349.13465800000006,', '423.25315200000006,', '485.124656,', '893.0959359999,', '448.410832,', '777.969536,', '1143.1616700000002,', '415.29476800000003,', '338.489976,', '320.203456,', '868.5910759999,', '730.150464,', '330.065584,', '650.560436,', '1301.560922,', '374.781278,', '429.13309599999997,', '576.719102,', '.540496,', '609.43012,']
	accuracies_string = ['80.35,', '79.638,', '81.586,', '81.946,', '81.606,', '81.888,', '80.502,', '79.824,', '80.446,', '81.106,', '81.082,', '81.826,', '79.68,', '81.338,', '81.198,', '79.038,', '78.838,', '80.358,', '80.878,', '80.256,', '81.638,', '80.45,', '79.058,', '79.426,', '79.36,', '79.296,', '81.874,', '81.056,', '81.898,', '81.178,', '81.796,', '80.18,', '79.14,', '73,', '81.364,', '81.426,', '80.032,', '82.056,', '81.206,', '81.87,', '80.868,', '81.458,', '81.804,', '79.458,', '79.044,', '81.64,', '81.664,', '79.518,', '81.296,', '81.298,', '79.532,', '80.948,', '79.704,', '80.994,', '81.174,', '80.442,', '834,', '79.13,', '81.792,', '80.344,', '80.778,', '81.714,', '80.654,', '80.668,', '81.826,', '81.96,', '80.318,', '81.862,', '80.52,', '79.594,', '81.466,', '79.416,', '79.49,', '80.9,', '82.044,', '81.576,', '81.47,', '80.702,', '81.888,', '79.13,', '79.356,', '79.5,', '81.322,', '79.614,', '81.04,', '81.606,', '79.364,', '78.832,', '78.86,', '80.732,', '80.782,', '78.4,', '80.782,', '82.272,', '79.014,', '79.538,', '80.356,', '79.49,', '80.546,']
	accuracies = []
	flops = []
	for f, a in zip(flops_string, accuracies_string):
		ff = float(f[:-1])
		aa = float(a[:-1])
		if aa < 100 and aa > 74 and ff > 100:
			accuracies.append(aa)
			flops.append(ff)
	#print(len(flops_string), len(accuracies_string))
	#accuracies = [float(i[:-1]) for i in accuracies_string]
	#flops = [float(i[:-1]) for i in flops_string]
	
	plt.plot(flops, accuracies, '.')
	plt.xlabel("FLOPs")
	plt.ylabel("Accuracy (%)")
	plt.title("Random Search of Vanilla NASViT Search Space")
	plt.show()

def comp_estimate(idx, orig_file, save_file):
	model = bm.get_LeViT_256(1, 1.0, 1.0, 0.9)
	layer_set = bm.model_to_layer_set(model)

	layer = layer_set.unique_layers[idx][0]

	with open(orig_file, 'rb') as in_file:
		hw_list = pickle.load(in_file)
		param_list = pickle.load(in_file)
		cycles_list = pickle.load(in_file)
		accesses_list = pickle.load(in_file)
	
	act_cycles_list = []
	act_accesses_list = []
	
	for i in len(hw_list):
		hw = hw_list[i]
		param = param_list[i]
		
		cycles, dram_accesses, _, _ = dw.run_layer(hw, param, layer, estimate=False)
		
		act_cycles_list.append(cycles)
		act_accesses_list.append(dram_accesses)
	
	# save the results
	with open(save_file, 'wb') as out_file:
		pickle.dump(hw_list, out_file, pickle.HIGHEST_PROTOCOL)
		pickle.dump(param_list, out_file, pickle.HIGHEST_PROTOCOL)
		pickle.dump(cycles_list, out_file, pickle.HIGHEST_PROTOCOL)
		pickle.dump(accesses_list, out_file, pickle.HIGHEST_PROTOCOL)
		pickle.dump(act_cycles_list, out_file, pickle.HIGHEST_PROTOCOL)
		pickle.dump(act_accesses_list, out_file, pickle.HIGHEST_PROTOCOL)

def evaluate_comp_estimates(idx, save_file):
	with open(save_file, 'rb') as in_file:
		hw_list = pickle.load(in_file)
		param_list = pickle.load(in_file)
		cycles_list = pickle.load(in_file)
		accesses_list = pickle.load(in_file)
		act_cycles_list = pickle.load(in_file)
		act_accesses_list = pickle.load(in_file)
	
	paired_list = [(i, j) for i, j in zip(cycles_list, act_cycles_list)]
	
	sorted_list = sorted(paired_list)
	
	min_val = min(act_cycles_list)
	
	for ii, (i, j) in enumerate(sorted_list):
		if j == min_val:
			print(idx, ": Min actual val at index:", ii)
			break
	
	paired_list = [(i, j) for i, j in zip(act_cycles_list, cycles_list)]
	
	sorted_list = sorted(paired_list)
	
	min_val = min(cycles_list)
	
	for ii, (i, j) in enumerate(sorted_list):
		if j == min_val:
			print(idx, ": Min estimated val at index:", ii)
			break
	
	# if you just rerrun the first x estimates, how close do you get to the min?
	best_estimates = sorted(zip(cycles_list, act_cycles_list))[:5]
	act_min = min(act_cycles_list)
	est_min = 10000000000
	for i,j in best_estimates:
		if j < est_min:
			est_min = j
	print(est_min, act_min, est_min / act_min)

def explore_search_space(iterations, save_file):
	#layer = bm.Layer(100, 100, 100)
	model = bm.get_LeViT_256(1, 1.0, 1.0, 0.9)
	layer_set = bm.model_to_layer_set(model)
	
	for idx, (layer, count) in enumerate([layer_set.unique_layers[1], layer_set.unique_layers[8], layer_set.unique_layers[20]]):
		
		print("***"*10)
		print("Starting layer", idx)
		layer.print()
		print("***"*10)
		
		hw_list = []
		param_list = []
		cycles_list = []
		accesses_list = []
		
		for i in range(iterations):
			print("***"*5)
			print("Iteration", i)
			print("***"*5)
		
			hw = random.choice(es.generate_hardware_configs(512, 320000 // 2, 0.5, 77))
			
			param = es.generate_random_param(hw, layer)
			
			cycles, dram_accesses, _, _ = dw.run_layer(hw, param, layer, estimate=False)
			
			hw_list.append(hw)
			param_list.append(param)
			cycles_list.append(cycles)
			accesses_list.append(dram_accesses)
		
		# save the results
		with open(save_file + str(idx) + ".pickle", 'wb') as out_file:
			pickle.dump(hw_list, out_file, pickle.HIGHEST_PROTOCOL)
			pickle.dump(param_list, out_file, pickle.HIGHEST_PROTOCOL)
			pickle.dump(cycles_list, out_file, pickle.HIGHEST_PROTOCOL)
			pickle.dump(accesses_list, out_file, pickle.HIGHEST_PROTOCOL)

def evaluate_results(save_file):
	with open(save_file, 'rb') as in_file:
		hw_list = pickle.load(in_file)
		param_list = pickle.load(in_file)
		cycles_list = pickle.load(in_file)
		accesses_list = pickle.load(in_file)
	
	print(min(cycles_list))
	
	x_values = list(range(len(param_list))) #[p[1] for p in param_list]
	x_name = "Index"
	y_values = cycles_list
	y_name = "Cycles"
	
	plt.plot(x_values, y_values, '.')
	plt.xlabel(x_name)
	plt.ylabel(y_name)
	plt.title("Random Parameter Search for a Layer in LeViT-256")
	#plt.show()

if __name__ == "__main__":
	#nasvit_exp_23_search_space()
	nasvit_vanilla_search_space()
	#explore_search_space(100, "explore_LeViT_256_test")
	#for i in range(27):
	#	comp_estimate(i, "explore_LeViT_256_estimate_" + str(i) + ".pickle", "explore_LeViT_256_estimate_vs_actual_" + str(i) + ".pickle")
		#evaluate_results("explore_LeViT_256_estimate_" + str(i) + ".pickle")
	#	evaluate_comp_estimates(i, "explore_LeViT_256_estimate_vs_actual_" + str(i) + ".pickle")